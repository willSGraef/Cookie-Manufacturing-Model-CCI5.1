#include "beremiz.h"
#ifndef __POUS_H
#define __POUS_H

#include "accessor.h"
#include "iec_std_lib.h"

__DECLARE_ENUMERATED_TYPE(LOGLEVEL,
  LOGLEVEL__CRITICAL,
  LOGLEVEL__WARNING,
  LOGLEVEL__INFO,
  LOGLEVEL__DEBUG
)
// FUNCTION_BLOCK LOGGER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,MSG)
  __DECLARE_VAR(LOGLEVEL,LEVEL)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,TRIG0)

} LOGGER;

void LOGGER_init__(LOGGER *data__, BOOL retain);
// Code part
void LOGGER_body__(LOGGER *data__);
// FUNCTION_BLOCK MIXER_RPM_FUNCTION
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(WORD,OUTPUT_RPM)
  __DECLARE_VAR(BOOL,VALVE_STATUS)
  __DECLARE_VAR(REAL,HOPPER_WEIGHT)
  __DECLARE_VAR(BOOL,MIXER_STATUS)
  __DECLARE_VAR(INT,COUNTER)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(INT,NOISE)

} MIXER_RPM_FUNCTION;

void MIXER_RPM_FUNCTION_init__(MIXER_RPM_FUNCTION *data__, BOOL retain);
// Code part
void MIXER_RPM_FUNCTION_body__(MIXER_RPM_FUNCTION *data__);
// FUNCTION_BLOCK VACUUM_RPM_FUNCTION
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(WORD,INPUT_RPM)
  __DECLARE_VAR(BOOL,VACUUM_STATUS)
  __DECLARE_VAR(WORD,OUTPUT_RPM)
  __DECLARE_VAR(WORD,MAX_RPM)
  __DECLARE_VAR(BOOL,MANUAL)
  __DECLARE_VAR(BOOL,DV)
  __DECLARE_VAR(INT,COUNTER)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(INT,NOISE)

} VACUUM_RPM_FUNCTION;

void VACUUM_RPM_FUNCTION_init__(VACUUM_RPM_FUNCTION *data__, BOOL retain);
// Code part
void VACUUM_RPM_FUNCTION_body__(VACUUM_RPM_FUNCTION *data__);
// FUNCTION_BLOCK REAL_TO_WORDS
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,INPUT)
  __DECLARE_VAR(WORD,HIGH)
  __DECLARE_VAR(WORD,LOW)

  // FB private variables - TEMP, private and located variables

} REAL_TO_WORDS;

void REAL_TO_WORDS_init__(REAL_TO_WORDS *data__, BOOL retain);
// Code part
void REAL_TO_WORDS_body__(REAL_TO_WORDS *data__);
// FUNCTION_BLOCK WORDS_TO_REAL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(WORD,HIGH)
  __DECLARE_VAR(WORD,LOW)
  __DECLARE_VAR(REAL,RESULT)

  // FB private variables - TEMP, private and located variables

} WORDS_TO_REAL;

void WORDS_TO_REAL_init__(WORDS_TO_REAL *data__, BOOL retain);
// Code part
void WORDS_TO_REAL_body__(WORDS_TO_REAL *data__);
// FUNCTION_BLOCK FLOUR_ALARM_CHECK
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,FLOUR_WEIGHT)
  __DECLARE_VAR(BOOL,ALARM)

  // FB private variables - TEMP, private and located variables

} FLOUR_ALARM_CHECK;

void FLOUR_ALARM_CHECK_init__(FLOUR_ALARM_CHECK *data__, BOOL retain);
// Code part
void FLOUR_ALARM_CHECK_body__(FLOUR_ALARM_CHECK *data__);
// FUNCTION_BLOCK SUGAR_ALARM_CHECK
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,SUGAR_WEIGHT)
  __DECLARE_VAR(BOOL,ALARM)

  // FB private variables - TEMP, private and located variables

} SUGAR_ALARM_CHECK;

void SUGAR_ALARM_CHECK_init__(SUGAR_ALARM_CHECK *data__, BOOL retain);
// Code part
void SUGAR_ALARM_CHECK_body__(SUGAR_ALARM_CHECK *data__);
// FUNCTION_BLOCK HOPPER_ALARM_CHECK
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,HOPPER_WEIGHT)
  __DECLARE_VAR(BOOL,ALARM)

  // FB private variables - TEMP, private and located variables

} HOPPER_ALARM_CHECK;

void HOPPER_ALARM_CHECK_init__(HOPPER_ALARM_CHECK *data__, BOOL retain);
// Code part
void HOPPER_ALARM_CHECK_body__(HOPPER_ALARM_CHECK *data__);
// FUNCTION_BLOCK VACUUM_ALARM_RPM
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,DV)
  __DECLARE_VAR(REAL,CFM)
  __DECLARE_VAR(WORD,VACUUM_RPM)
  __DECLARE_VAR(BOOL,ALARM)

  // FB private variables - TEMP, private and located variables

} VACUUM_ALARM_RPM;

void VACUUM_ALARM_RPM_init__(VACUUM_ALARM_RPM *data__, BOOL retain);
// Code part
void VACUUM_ALARM_RPM_body__(VACUUM_ALARM_RPM *data__);
// FUNCTION_BLOCK PAPERCUTTER_CPM_FUNCTION
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,PAPER_CUTTER)
  __DECLARE_VAR(REAL,COOKIE_DIAMETER)
  __DECLARE_VAR(REAL,COOKIE_MARGIN)
  __DECLARE_VAR(REAL,CONVEYOR_FPM)
  __DECLARE_VAR(WORD,PAPERCUT_CPM)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(REAL,ROWS)
  __DECLARE_VAR(REAL,FLOAT_CPM)

} PAPERCUTTER_CPM_FUNCTION;

void PAPERCUTTER_CPM_FUNCTION_init__(PAPERCUTTER_CPM_FUNCTION *data__, BOOL retain);
// Code part
void PAPERCUTTER_CPM_FUNCTION_body__(PAPERCUTTER_CPM_FUNCTION *data__);
// FUNCTION_BLOCK CONVEYOR_FPM_FUNCTION
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(WORD,WIRECUT_CPM)
  __DECLARE_VAR(REAL,COOKIE_MARGIN)
  __DECLARE_VAR(REAL,COOKIE_DIAMETER)
  __DECLARE_VAR(REAL,CONVEYOR_FPM)

  // FB private variables - TEMP, private and located variables

} CONVEYOR_FPM_FUNCTION;

void CONVEYOR_FPM_FUNCTION_init__(CONVEYOR_FPM_FUNCTION *data__, BOOL retain);
// Code part
void CONVEYOR_FPM_FUNCTION_body__(CONVEYOR_FPM_FUNCTION *data__);
// FUNCTION_BLOCK WIRECUT_CPM_FUNCTION
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(WORD,WIRECUT_CPM)
  __DECLARE_VAR(BOOL,WIRECUTTER)

  // FB private variables - TEMP, private and located variables

} WIRECUT_CPM_FUNCTION;

void WIRECUT_CPM_FUNCTION_init__(WIRECUT_CPM_FUNCTION *data__, BOOL retain);
// Code part
void WIRECUT_CPM_FUNCTION_body__(WIRECUT_CPM_FUNCTION *data__);
// PROGRAM TAG_DISPLAY
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_LOCATED(WORD,LCS_1_LOW)
  __DECLARE_LOCATED(WORD,LCS_1_HIGH)
  __DECLARE_LOCATED(WORD,LCS_2_LOW)
  __DECLARE_LOCATED(WORD,LCS_2_HIGH)
  __DECLARE_LOCATED(WORD,LCS_3_LOW)
  __DECLARE_LOCATED(WORD,LCS_3_HIGH)
  __DECLARE_LOCATED(WORD,LCS_4_LOW)
  __DECLARE_LOCATED(WORD,LCS_4_HIGH)
  __DECLARE_LOCATED(WORD,LCF_1_LOW)
  __DECLARE_LOCATED(WORD,LCF_1_HIGH)
  __DECLARE_LOCATED(WORD,LCF_2_LOW)
  __DECLARE_LOCATED(WORD,LCF_2_HIGH)
  __DECLARE_LOCATED(WORD,LCF_3_LOW)
  __DECLARE_LOCATED(WORD,LCF_3_HIGH)
  __DECLARE_LOCATED(WORD,LCF_4_LOW)
  __DECLARE_LOCATED(WORD,LCF_4_HIGH)
  __DECLARE_LOCATED(WORD,LCH_HIGH)
  __DECLARE_LOCATED(WORD,LCH_LOW)
  __DECLARE_LOCATED(WORD,LCM_HIGH)
  __DECLARE_LOCATED(WORD,LCM_LOW)
  __DECLARE_LOCATED(WORD,TROUGH_WEIGHT_HIGH)
  __DECLARE_LOCATED(WORD,TROUGH_WEIGHT_LOW)
  __DECLARE_LOCATED(WORD,VACUUM_RPM)
  __DECLARE_LOCATED(WORD,MIXER_RPM)
  __DECLARE_LOCATED(WORD,WIRECUT_CPM)
  __DECLARE_LOCATED(WORD,PAPERCUT_CPM)
  __DECLARE_LOCATED(REAL,CONVEYOR_FPM)
  __DECLARE_LOCATED(WORD,CONVEYOR_FPM_HIGH)
  __DECLARE_LOCATED(WORD,CONVEYOR_FPM_LOW)
  __DECLARE_LOCATED(REAL,LCS_1)
  __DECLARE_LOCATED(REAL,LCS_2)
  __DECLARE_LOCATED(REAL,LCS_3)
  __DECLARE_LOCATED(REAL,LCS_4)
  __DECLARE_LOCATED(REAL,LCF_1)
  __DECLARE_LOCATED(REAL,LCF_2)
  __DECLARE_LOCATED(REAL,LCF_3)
  __DECLARE_LOCATED(REAL,LCF_4)
  __DECLARE_LOCATED(REAL,LCH)
  __DECLARE_LOCATED(REAL,LCM)
  __DECLARE_LOCATED(REAL,TROUGH_WEIGHT)
  __DECLARE_LOCATED(REAL,FLOUR_WEIGHT)
  __DECLARE_LOCATED(WORD,FLOUR_WEIGHT_HIGH)
  __DECLARE_LOCATED(WORD,FLOUR_WEIGHT_LOW)
  __DECLARE_LOCATED(REAL,SUGAR_WEIGHT)
  __DECLARE_LOCATED(WORD,SUGAR_WEIGHT_HIGH)
  __DECLARE_LOCATED(WORD,SUGAR_WEIGHT_LOW)
  __DECLARE_LOCATED(REAL,TUNNEL_TEMP)
  __DECLARE_LOCATED(WORD,TUNNEL_TEMP_HIGH)
  __DECLARE_LOCATED(WORD,TUNNEL_TEMP_LOW)
  __DECLARE_LOCATED(REAL,NITROGEN_VOLUME)
  __DECLARE_LOCATED(WORD,NITROGEN_VOLUME_HIGH)
  __DECLARE_LOCATED(WORD,NITROGEN_VOLUME_LOW)
  __DECLARE_LOCATED(BOOL,RV_1)
  __DECLARE_LOCATED(BOOL,RV_2)
  __DECLARE_LOCATED(BOOL,RV_3)
  __DECLARE_LOCATED(BOOL,DV)
  __DECLARE_LOCATED(BOOL,VACUUM)
  __DECLARE_LOCATED(BOOL,MIXER)
  __DECLARE_LOCATED(BOOL,FLOUR_ALARM)
  __DECLARE_LOCATED(BOOL,SUGAR_ALARM)
  __DECLARE_LOCATED(BOOL,HOPPER_ALARM)
  __DECLARE_LOCATED(BOOL,VACUUM_ALARM)
  __DECLARE_LOCATED(BOOL,VACUUM_MANUAL)
  __DECLARE_LOCATED(BOOL,WIRECUTTER)
  __DECLARE_LOCATED(BOOL,TROUGH_TRANSFER)
  __DECLARE_LOCATED(BOOL,CONVEYOR)
  __DECLARE_LOCATED(BOOL,PAPER_CUTTER)
  __DECLARE_LOCATED(BOOL,GV_1)
  __DECLARE_LOCATED(BOOL,FAN_1)
  __DECLARE_LOCATED(BOOL,FAN_2)
  __DECLARE_LOCATED(BOOL,FAN_3)
  __DECLARE_LOCATED(BOOL,EXHAUST_FAN)
  __DECLARE_LOCATED(REAL,CFM)
  __DECLARE_LOCATED(BOOL,RESET)
  WORDS_TO_REAL WORDS_TO_REAL0;
  WORDS_TO_REAL WORDS_TO_REAL1;
  WORDS_TO_REAL WORDS_TO_REAL2;
  WORDS_TO_REAL WORDS_TO_REAL3;
  WORDS_TO_REAL WORDS_TO_REAL4;
  WORDS_TO_REAL WORDS_TO_REAL5;
  WORDS_TO_REAL WORDS_TO_REAL6;
  WORDS_TO_REAL WORDS_TO_REAL7;
  WORDS_TO_REAL WORDS_TO_REAL8;
  FLOUR_ALARM_CHECK FLOUR_ALARM_CHECK0;
  SUGAR_ALARM_CHECK SUGAR_ALARM_CHECK0;
  HOPPER_ALARM_CHECK HOPPER_ALARM_CHECK0;
  VACUUM_ALARM_RPM VACUUM_ALARM_RPM0;
  REAL_TO_WORDS REAL_TO_WORDS0;
  REAL_TO_WORDS REAL_TO_WORDS1;
  __DECLARE_VAR(WORD,VACUUM_MAX_RPM)
  __DECLARE_VAR(WORD,MIXER_MAX_RPM)
  MIXER_RPM_FUNCTION MIXER_RPM_FUNCTION0;
  VACUUM_RPM_FUNCTION VACUUM_RPM_FUNCTION0;
  __DECLARE_VAR(REAL,COOKIE_DIAMETER)
  __DECLARE_VAR(REAL,COOKIE_MARGIN)
  PAPERCUTTER_CPM_FUNCTION PAPERCUTTER_CPM_FUNCTION0;
  CONVEYOR_FPM_FUNCTION CONVEYOR_FPM_FUNCTION0;
  WORDS_TO_REAL WORDS_TO_REAL9;
  WORDS_TO_REAL WORDS_TO_REAL10;
  REAL_TO_WORDS REAL_TO_WORDS2;
  WIRECUT_CPM_FUNCTION WIRECUT_CPM_FUNCTION0;
  WORDS_TO_REAL WORDS_TO_REAL11;
  WORDS_TO_REAL WORDS_TO_REAL12;
  __DECLARE_LOCATED(BOOL,BOX_MAKER)
  __DECLARE_LOCATED(BOOL,TAPER)
  __DECLARE_LOCATED(BOOL,LABELER)
  __DECLARE_LOCATED(BOOL,PALLETIZER)
  __DECLARE_LOCATED(BOOL,PALLETIZER_GRABBING)
  __DECLARE_LOCATED(BOOL,WRAPPER)
  __DECLARE_LOCATED(BOOL,WRAPPER_CONVEYOR)
  __DECLARE_LOCATED(BOOL,CONVEYOR_1)
  __DECLARE_LOCATED(BOOL,CONVEYOR_2)
  __DECLARE_LOCATED(BOOL,CONVEYOR_3)
  __DECLARE_LOCATED(BOOL,CONVEYOR_4)
  __DECLARE_LOCATED(BOOL,CONVEYOR_5)
  __DECLARE_LOCATED(BOOL,PS_1)
  __DECLARE_LOCATED(BOOL,PS_2)
  __DECLARE_LOCATED(BOOL,PS_3)
  __DECLARE_LOCATED(BOOL,PS_4)
  __DECLARE_LOCATED(BOOL,PS_5)
  __DECLARE_LOCATED(BOOL,PS_6)
  __DECLARE_LOCATED(BOOL,BAGGER)
  __DECLARE_LOCATED(WORD,PALLETIZER_POSITION)
  __DECLARE_LOCATED(WORD,BOX_COUNT)
  __DECLARE_LOCATED(BOOL,WRAPPER_WRAPPING)
  __DECLARE_LOCATED(BOOL,BOX_MAKER_BOXING)
  __DECLARE_VAR(REAL,_TMP_ADD37_OUT)
  __DECLARE_VAR(REAL,_TMP_ADD38_OUT)
  __DECLARE_VAR(REAL,_TMP_ADD41_OUT)
  __DECLARE_VAR(REAL,_TMP_ADD39_OUT)
  __DECLARE_VAR(REAL,_TMP_ADD40_OUT)
  __DECLARE_VAR(REAL,_TMP_ADD43_OUT)
  __DECLARE_VAR(INT,MIXER_RPM_FUNCTION0_COUNTER)
  __DECLARE_VAR(INT,VACUUM_RPM_FUNCTION0_COUNTER)
  __DECLARE_VAR(BOOL,_TMP_EQ140_OUT)
  __DECLARE_VAR(BOOL,_TMP_AND143_OUT)
  __DECLARE_VAR(INT,_TMP_WORD_TO_INT162_OUT)
  __DECLARE_VAR(BOOL,_TMP_ADD161_ENO)
  __DECLARE_VAR(INT,_TMP_ADD161_OUT)
  __DECLARE_VAR(WORD,_TMP_INT_TO_WORD163_OUT)
  __DECLARE_VAR(BOOL,_TMP_EQ103_OUT)
  __DECLARE_VAR(BOOL,_TMP_AND152_OUT)

} TAG_DISPLAY;

void TAG_DISPLAY_init__(TAG_DISPLAY *data__, BOOL retain);
// Code part
void TAG_DISPLAY_body__(TAG_DISPLAY *data__);
// FUNCTION_BLOCK WIRECUT_PPM_FUNCTION
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(WORD,WIRECUT_CPM)
  __DECLARE_VAR(REAL,WIRECUT_PPM)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(REAL,COOKIE_WEIGHT)
  __DECLARE_VAR(REAL,COOKIE_COUNT)

} WIRECUT_PPM_FUNCTION;

void WIRECUT_PPM_FUNCTION_init__(WIRECUT_PPM_FUNCTION *data__, BOOL retain);
// Code part
void WIRECUT_PPM_FUNCTION_body__(WIRECUT_PPM_FUNCTION *data__);
#endif //__POUS_H
